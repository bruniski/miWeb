Empece instalando next con esLint, y luego instale el framework taildwind.css. Para instalar taildwind lo que tenia que hacer es seguir el paso a paso que ofrece la pagina de manera clara. Siguiente de eso fui a una pagina llamada tailwind components, el cual ofrece mucha variedad al momento de crear distintas estructuras. Empece creando el loginPage. Como lo unico que hice fue copiar y pegar la estructura, lo que hago siguiente de eso es crear la interaccion. Como yo quiero que el usuario pueda ingresar sesion con su pagina de facebook o gmail, lo que tengo que utilizar es nextAuth.js. El cual, tambien tiene una pagina que ayuda con el paso a paso. Lo primero que hago es crear una carpeta api/aut/[...nextauth] y dentro de esas carpetas, colocar el archivo route.js. Luego debo instalar next-auth (npm install next-auth). Una vez que hice eso, ingreso al route.js y creo el codigo para la verificacion. Este codigo se puede extraer de la pagina nextAuth.js. Este codigo en resumen lo que hace es crear la verificacion con las cuentas que yo quiero vincular, en este caso utilice google. Como utilice google coloco googleProvider y dentro lleva un clientId y clientSecret. Estos dos, llevan una credenciales que se generan en la web https://console.developers.google.com/apis/credentials . Aca para crear una credencial, me puedo buscar un tutorial por si me olvido, pero el paso a paso es sencillo. Debo ir a crear credenciales, luego ID de cliente de OAuth, y luego completo la configuracion. En tipo de aplicacion: aplicacion web. Nombre: (el que quiera). en Or√≠genes autorizados de JavaScript: la url de localhost3000. Y en URI de redireccionamiento autorizados: http://localhost:3000/api/auth/callback/google. Y ahi ya estaria configurado para la verificacion de google.Una vez que lo configure debo extraer los valores de clientId y clientSecret que me proporciona estas credenciales. Estos valores los debo colocar en una variable de entorno que se llama .env . Esta variable se crea en la carpeta raiz y coloco 3 valores el primero el GOOGLE_ID que va el valor de clientId y luego GOOGLE_SECRET que va el valor de clientSecret. Por ultimo coloco NEXTAUTH_URL que va la url de localhost3000. Luego vuelvo al route.js y completo el clientId con process.env.GOOGLE_ID y clientSecret con clientSecret: process.env.GOOGLE_SECRET. Ahora lo que tengo que hacer es crear el codigo javaScript para que sepa cuando debe iniciar sesion y cuando no. Por empezar cuando se inicia sesion nextAuth me proporciona una serie de datos de la persona, entonces, a partir de estos datos creo la interacion. Para recibir estos datos, lo puedo hacer a traves de un hook de react llamado useSession. Este hook tiene dos propiedades: data, status. Estas propiedades pueden variar sus valores. Si no inicie sesion, el status va a ser 'unauthenticated' y data null. En el momento que inicio sesion o cierro sesion, en esa transicion, data va a ser undefined y status 'loading'. Y si ya inicie sesion en data voy a obtener los valores de la persona, y en status 'authenticated'. este hook se debe colocar en un provider, entonces creo un componente que se llame sessionProvider y envuelvo esta aplicacion con el sessionProvider, como lo hice en este proyecto. Cabe destacar que donde utilice javaScript debo colocar el 'use client'. La interaccion que le di a continuacion fue la de iniciar sesion, entonces extraje de una muestra los estilos y toda la estructura de tailwind components. Ese codigo lo coloco en un archivo llamado Login.jsx dentro de la carpeta loginPage. La interaccion es la siguiente: la pagina tiene que interpretar que cuando se inicie sesion me muestre la pagina homePage, pero cuando no se inicio, debe quedarse en la pagina login. Entonces en el icono de gmail le coloco un boton, el cual tiene un evento onClick y lo que hace es ejecutar la funcion de nextAuth singIn que la importo. Esta funcion lleva un string de parametro, que en este caso es "google". Este singIn lo que hace es simplemente iniciar sesion. Una vez que hice eso, creo otro archivo que lo que va a hacer es preguntar si se inicio sesion o no, en caso de que se inicie sesion, se dirije al homePage, y si no esta iniciado, se queda en login. Esta archivo se llama PageLogin.jsx